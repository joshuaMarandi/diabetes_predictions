# -*- coding: utf-8 -*-
"""Diabetes_svm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NYeFsSyL-USTeQPYuVgpZTGrziKywoU8
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report


# Load the dataset
url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
           'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
data = pd.read_csv(url, header=None, names=columns)

# Display basic dataset information
print(data.head())


# Check for missing values
print(data.isnull().sum())

# Split data into features and labels
X = data.drop('Outcome', axis=1)
y = data['Outcome']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the SVM model
svm_model = SVC(kernel='linear', random_state=42)
svm_model.fit(X_train, y_train)

# Make predictions
y_pred = svm_model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)


print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1:.2f}")
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import joblib
joblib.dump(svm_model, 'svm_diabetes_model.pkl')

# Load the saved SVM model
loaded_model = joblib.load('svm_diabetes_model.pkl')

# Example: Making predictions on the test set
y_pred = loaded_model.predict(X_test)

# Evaluate the loaded model's performance
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print(f"Precision: {precision:.2f}")
print(f"Recall: {recall:.2f}")
print(f"F1-Score: {f1:.2f}")

# Example: New patient data
new_patient = [[5, 120, 70, 15, 80, 25.0, 0.5, 30]]  # Replace with actual patient data

# Use the loaded model to predict
prediction = loaded_model.predict(new_patient)

# Output the prediction
if prediction[0] == 1:
    print("The patient is likely to have diabetes.")
else:
    print("The patient is unlikely to have diabetes.")

from sklearn.preprocessing import StandardScaler

# scalerscscaler Sc crualer bio = StandardScaler()
# X_train_scaled = scaler.fit_transform(X_train)
# new_patient_scaled = scaler.transform(new_patient)
# prediction = loaded_model.predict(new_patient_scaled)